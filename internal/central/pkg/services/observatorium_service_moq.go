// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"github.com/stackrox/acs-fleet-manager/pkg/client/observatorium"
	serviceError "github.com/stackrox/acs-fleet-manager/pkg/errors"
	"sync"
)

// Ensure, that ObservatoriumServiceMock does implement ObservatoriumService.
// If this is not the case, regenerate this file with moq.
var _ ObservatoriumService = &ObservatoriumServiceMock{}

// ObservatoriumServiceMock is a mock implementation of ObservatoriumService.
//
// 	func TestSomethingThatUsesObservatoriumService(t *testing.T) {
//
// 		// make and configure a mocked ObservatoriumService
// 		mockedObservatoriumService := &ObservatoriumServiceMock{
// 			GetCentralStateFunc: func(name string, namespaceName string) (observatorium.DinosaurState, error) {
// 				panic("mock out the GetCentralState method")
// 			},
// 			GetMetricsByCentralIDFunc: func(ctx context.Context, csMetrics *observatorium.DinosaurMetrics, id string, query observatorium.MetricsReqParams) (string, *serviceError.ServiceError) {
// 				panic("mock out the GetMetricsByCentralID method")
// 			},
// 		}
//
// 		// use mockedObservatoriumService in code that requires ObservatoriumService
// 		// and then make assertions.
//
// 	}
type ObservatoriumServiceMock struct {
	// GetCentralStateFunc mocks the GetCentralState method.
	GetCentralStateFunc func(name string, namespaceName string) (observatorium.DinosaurState, error)

	// GetMetricsByCentralIDFunc mocks the GetMetricsByCentralID method.
	GetMetricsByCentralIDFunc func(ctx context.Context, csMetrics *observatorium.DinosaurMetrics, id string, query observatorium.MetricsReqParams) (string, *serviceError.ServiceError)

	// calls tracks calls to the methods.
	calls struct {
		// GetCentralState holds details about calls to the GetCentralState method.
		GetCentralState []struct {
			// Name is the name argument value.
			Name string
			// NamespaceName is the namespaceName argument value.
			NamespaceName string
		}
		// GetMetricsByCentralID holds details about calls to the GetMetricsByCentralID method.
		GetMetricsByCentralID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CsMetrics is the csMetrics argument value.
			CsMetrics *observatorium.DinosaurMetrics
			// ID is the id argument value.
			ID string
			// Query is the query argument value.
			Query observatorium.MetricsReqParams
		}
	}
	lockGetCentralState       sync.RWMutex
	lockGetMetricsByCentralID sync.RWMutex
}

// GetCentralState calls GetCentralStateFunc.
func (mock *ObservatoriumServiceMock) GetCentralState(name string, namespaceName string) (observatorium.DinosaurState, error) {
	if mock.GetCentralStateFunc == nil {
		panic("ObservatoriumServiceMock.GetCentralStateFunc: method is nil but ObservatoriumService.GetCentralState was just called")
	}
	callInfo := struct {
		Name          string
		NamespaceName string
	}{
		Name:          name,
		NamespaceName: namespaceName,
	}
	mock.lockGetCentralState.Lock()
	mock.calls.GetCentralState = append(mock.calls.GetCentralState, callInfo)
	mock.lockGetCentralState.Unlock()
	return mock.GetCentralStateFunc(name, namespaceName)
}

// GetCentralStateCalls gets all the calls that were made to GetCentralState.
// Check the length with:
//     len(mockedObservatoriumService.GetCentralStateCalls())
func (mock *ObservatoriumServiceMock) GetCentralStateCalls() []struct {
	Name          string
	NamespaceName string
} {
	var calls []struct {
		Name          string
		NamespaceName string
	}
	mock.lockGetCentralState.RLock()
	calls = mock.calls.GetCentralState
	mock.lockGetCentralState.RUnlock()
	return calls
}

// GetMetricsByCentralID calls GetMetricsByCentralIDFunc.
func (mock *ObservatoriumServiceMock) GetMetricsByCentralID(ctx context.Context, csMetrics *observatorium.DinosaurMetrics, id string, query observatorium.MetricsReqParams) (string, *serviceError.ServiceError) {
	if mock.GetMetricsByCentralIDFunc == nil {
		panic("ObservatoriumServiceMock.GetMetricsByCentralIDFunc: method is nil but ObservatoriumService.GetMetricsByCentralID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		CsMetrics *observatorium.DinosaurMetrics
		ID        string
		Query     observatorium.MetricsReqParams
	}{
		Ctx:       ctx,
		CsMetrics: csMetrics,
		ID:        id,
		Query:     query,
	}
	mock.lockGetMetricsByCentralID.Lock()
	mock.calls.GetMetricsByCentralID = append(mock.calls.GetMetricsByCentralID, callInfo)
	mock.lockGetMetricsByCentralID.Unlock()
	return mock.GetMetricsByCentralIDFunc(ctx, csMetrics, id, query)
}

// GetMetricsByCentralIDCalls gets all the calls that were made to GetMetricsByCentralID.
// Check the length with:
//     len(mockedObservatoriumService.GetMetricsByCentralIDCalls())
func (mock *ObservatoriumServiceMock) GetMetricsByCentralIDCalls() []struct {
	Ctx       context.Context
	CsMetrics *observatorium.DinosaurMetrics
	ID        string
	Query     observatorium.MetricsReqParams
} {
	var calls []struct {
		Ctx       context.Context
		CsMetrics *observatorium.DinosaurMetrics
		ID        string
		Query     observatorium.MetricsReqParams
	}
	mock.lockGetMetricsByCentralID.RLock()
	calls = mock.calls.GetMetricsByCentralID
	mock.lockGetMetricsByCentralID.RUnlock()
	return calls
}
