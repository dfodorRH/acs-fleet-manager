// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"context"
	"github.com/aws/aws-sdk-go/service/route53"
	constants2 "github.com/stackrox/acs-fleet-manager/internal/central/constants"
	"github.com/stackrox/acs-fleet-manager/internal/central/pkg/api/dbapi"
	"github.com/stackrox/acs-fleet-manager/internal/central/pkg/centrals/types"
	"github.com/stackrox/acs-fleet-manager/pkg/api"
	serviceError "github.com/stackrox/acs-fleet-manager/pkg/errors"
	"github.com/stackrox/acs-fleet-manager/pkg/services"
	"sync"
)

// Ensure, that CentralServiceMock does implement CentralService.
// If this is not the case, regenerate this file with moq.
var _ CentralService = &CentralServiceMock{}

// CentralServiceMock is a mock implementation of CentralService.
//
// 	func TestSomethingThatUsesCentralService(t *testing.T) {
//
// 		// make and configure a mocked CentralService
// 		mockedCentralService := &CentralServiceMock{
// 			AcceptCentralRequestFunc: func(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError {
// 				panic("mock out the AcceptCentralRequest method")
// 			},
// 			ChangeCentralCNAMERecordsFunc: func(centralRequest *dbapi.CentralRequest, action CentralRoutesAction) (*route53.ChangeResourceRecordSetsOutput, *serviceError.ServiceError) {
// 				panic("mock out the ChangeCentralCNAMERecords method")
// 			},
// 			CountByRegionAndInstanceTypeFunc: func() ([]CentralRegionCount, error) {
// 				panic("mock out the CountByRegionAndInstanceType method")
// 			},
// 			CountByStatusFunc: func(status []constants2.CentralStatus) ([]CentralStatusCount, error) {
// 				panic("mock out the CountByStatus method")
// 			},
// 			DeleteFunc: func(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError {
// 				panic("mock out the Delete method")
// 			},
// 			DeprovisionCentralForUsersFunc: func(users []string) *serviceError.ServiceError {
// 				panic("mock out the DeprovisionCentralForUsers method")
// 			},
// 			DeprovisionExpiredCentralsFunc: func(centralAgeInHours int) *serviceError.ServiceError {
// 				panic("mock out the DeprovisionExpiredCentrals method")
// 			},
// 			DetectInstanceTypeFunc: func(centralRequest *dbapi.CentralRequest) (types.CentralInstanceType, *serviceError.ServiceError) {
// 				panic("mock out the DetectInstanceType method")
// 			},
// 			GetFunc: func(ctx context.Context, id string) (*dbapi.CentralRequest, *serviceError.ServiceError) {
// 				panic("mock out the Get method")
// 			},
// 			GetByIDFunc: func(id string) (*dbapi.CentralRequest, *serviceError.ServiceError) {
// 				panic("mock out the GetByID method")
// 			},
// 			GetCNAMERecordStatusFunc: func(centralRequest *dbapi.CentralRequest) (*CNameRecordStatus, error) {
// 				panic("mock out the GetCNAMERecordStatus method")
// 			},
// 			HasAvailableCapacityFunc: func() (bool, *serviceError.ServiceError) {
// 				panic("mock out the HasAvailableCapacity method")
// 			},
// 			HasAvailableCapacityInRegionFunc: func(centralRequest *dbapi.CentralRequest) (bool, *serviceError.ServiceError) {
// 				panic("mock out the HasAvailableCapacityInRegion method")
// 			},
// 			ListFunc: func(ctx context.Context, listArgs *services.ListArguments) (dbapi.CentralList, *api.PagingMeta, *serviceError.ServiceError) {
// 				panic("mock out the List method")
// 			},
// 			ListByClusterIDFunc: func(clusterID string) ([]*dbapi.CentralRequest, *serviceError.ServiceError) {
// 				panic("mock out the ListByClusterID method")
// 			},
// 			ListByStatusFunc: func(status ...constants2.CentralStatus) ([]*dbapi.CentralRequest, *serviceError.ServiceError) {
// 				panic("mock out the ListByStatus method")
// 			},
// 			ListCentralsWithRoutesNotCreatedFunc: func() ([]*dbapi.CentralRequest, *serviceError.ServiceError) {
// 				panic("mock out the ListCentralsWithRoutesNotCreated method")
// 			},
// 			ListCentralsWithoutAuthConfigFunc: func() ([]*dbapi.CentralRequest, *serviceError.ServiceError) {
// 				panic("mock out the ListCentralsWithoutAuthConfig method")
// 			},
// 			ListComponentVersionsFunc: func() ([]CentralComponentVersions, error) {
// 				panic("mock out the ListComponentVersions method")
// 			},
// 			PrepareCentralRequestFunc: func(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError {
// 				panic("mock out the PrepareCentralRequest method")
// 			},
// 			RegisterCentralDeprovisionJobFunc: func(ctx context.Context, id string) *serviceError.ServiceError {
// 				panic("mock out the RegisterCentralDeprovisionJob method")
// 			},
// 			RegisterCentralJobFunc: func(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError {
// 				panic("mock out the RegisterCentralJob method")
// 			},
// 			UpdateFunc: func(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError {
// 				panic("mock out the Update method")
// 			},
// 			UpdateStatusFunc: func(id string, status constants2.CentralStatus) (bool, *serviceError.ServiceError) {
// 				panic("mock out the UpdateStatus method")
// 			},
// 			UpdatesFunc: func(centralRequest *dbapi.CentralRequest, values map[string]interface{}) *serviceError.ServiceError {
// 				panic("mock out the Updates method")
// 			},
// 			VerifyAndUpdateCentralAdminFunc: func(ctx context.Context, centralRequest *dbapi.CentralRequest) *serviceError.ServiceError {
// 				panic("mock out the VerifyAndUpdateCentralAdmin method")
// 			},
// 		}
//
// 		// use mockedCentralService in code that requires CentralService
// 		// and then make assertions.
//
// 	}
type CentralServiceMock struct {
	// AcceptCentralRequestFunc mocks the AcceptCentralRequest method.
	AcceptCentralRequestFunc func(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError

	// ChangeCentralCNAMERecordsFunc mocks the ChangeCentralCNAMERecords method.
	ChangeCentralCNAMERecordsFunc func(centralRequest *dbapi.CentralRequest, action CentralRoutesAction) (*route53.ChangeResourceRecordSetsOutput, *serviceError.ServiceError)

	// CountByRegionAndInstanceTypeFunc mocks the CountByRegionAndInstanceType method.
	CountByRegionAndInstanceTypeFunc func() ([]CentralRegionCount, error)

	// CountByStatusFunc mocks the CountByStatus method.
	CountByStatusFunc func(status []constants2.CentralStatus) ([]CentralStatusCount, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError

	// DeprovisionCentralForUsersFunc mocks the DeprovisionCentralForUsers method.
	DeprovisionCentralForUsersFunc func(users []string) *serviceError.ServiceError

	// DeprovisionExpiredCentralsFunc mocks the DeprovisionExpiredCentrals method.
	DeprovisionExpiredCentralsFunc func(centralAgeInHours int) *serviceError.ServiceError

	// DetectInstanceTypeFunc mocks the DetectInstanceType method.
	DetectInstanceTypeFunc func(centralRequest *dbapi.CentralRequest) (types.CentralInstanceType, *serviceError.ServiceError)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id string) (*dbapi.CentralRequest, *serviceError.ServiceError)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(id string) (*dbapi.CentralRequest, *serviceError.ServiceError)

	// GetCNAMERecordStatusFunc mocks the GetCNAMERecordStatus method.
	GetCNAMERecordStatusFunc func(centralRequest *dbapi.CentralRequest) (*CNameRecordStatus, error)

	// HasAvailableCapacityFunc mocks the HasAvailableCapacity method.
	HasAvailableCapacityFunc func() (bool, *serviceError.ServiceError)

	// HasAvailableCapacityInRegionFunc mocks the HasAvailableCapacityInRegion method.
	HasAvailableCapacityInRegionFunc func(centralRequest *dbapi.CentralRequest) (bool, *serviceError.ServiceError)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, listArgs *services.ListArguments) (dbapi.CentralList, *api.PagingMeta, *serviceError.ServiceError)

	// ListByClusterIDFunc mocks the ListByClusterID method.
	ListByClusterIDFunc func(clusterID string) ([]*dbapi.CentralRequest, *serviceError.ServiceError)

	// ListByStatusFunc mocks the ListByStatus method.
	ListByStatusFunc func(status ...constants2.CentralStatus) ([]*dbapi.CentralRequest, *serviceError.ServiceError)

	// ListCentralsWithRoutesNotCreatedFunc mocks the ListCentralsWithRoutesNotCreated method.
	ListCentralsWithRoutesNotCreatedFunc func() ([]*dbapi.CentralRequest, *serviceError.ServiceError)

	// ListCentralsWithoutAuthConfigFunc mocks the ListCentralsWithoutAuthConfig method.
	ListCentralsWithoutAuthConfigFunc func() ([]*dbapi.CentralRequest, *serviceError.ServiceError)

	// ListComponentVersionsFunc mocks the ListComponentVersions method.
	ListComponentVersionsFunc func() ([]CentralComponentVersions, error)

	// PrepareCentralRequestFunc mocks the PrepareCentralRequest method.
	PrepareCentralRequestFunc func(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError

	// RegisterCentralDeprovisionJobFunc mocks the RegisterCentralDeprovisionJob method.
	RegisterCentralDeprovisionJobFunc func(ctx context.Context, id string) *serviceError.ServiceError

	// RegisterCentralJobFunc mocks the RegisterCentralJob method.
	RegisterCentralJobFunc func(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError

	// UpdateFunc mocks the Update method.
	UpdateFunc func(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(id string, status constants2.CentralStatus) (bool, *serviceError.ServiceError)

	// UpdatesFunc mocks the Updates method.
	UpdatesFunc func(centralRequest *dbapi.CentralRequest, values map[string]interface{}) *serviceError.ServiceError

	// VerifyAndUpdateCentralAdminFunc mocks the VerifyAndUpdateCentralAdmin method.
	VerifyAndUpdateCentralAdminFunc func(ctx context.Context, centralRequest *dbapi.CentralRequest) *serviceError.ServiceError

	// calls tracks calls to the methods.
	calls struct {
		// AcceptCentralRequest holds details about calls to the AcceptCentralRequest method.
		AcceptCentralRequest []struct {
			// CentralRequest is the centralRequest argument value.
			CentralRequest *dbapi.CentralRequest
		}
		// ChangeCentralCNAMERecords holds details about calls to the ChangeCentralCNAMERecords method.
		ChangeCentralCNAMERecords []struct {
			// CentralRequest is the centralRequest argument value.
			CentralRequest *dbapi.CentralRequest
			// Action is the action argument value.
			Action CentralRoutesAction
		}
		// CountByRegionAndInstanceType holds details about calls to the CountByRegionAndInstanceType method.
		CountByRegionAndInstanceType []struct {
		}
		// CountByStatus holds details about calls to the CountByStatus method.
		CountByStatus []struct {
			// Status is the status argument value.
			Status []constants2.CentralStatus
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// CentralRequest is the centralRequest argument value.
			CentralRequest *dbapi.CentralRequest
		}
		// DeprovisionCentralForUsers holds details about calls to the DeprovisionCentralForUsers method.
		DeprovisionCentralForUsers []struct {
			// Users is the users argument value.
			Users []string
		}
		// DeprovisionExpiredCentrals holds details about calls to the DeprovisionExpiredCentrals method.
		DeprovisionExpiredCentrals []struct {
			// CentralAgeInHours is the centralAgeInHours argument value.
			CentralAgeInHours int
		}
		// DetectInstanceType holds details about calls to the DetectInstanceType method.
		DetectInstanceType []struct {
			// CentralRequest is the centralRequest argument value.
			CentralRequest *dbapi.CentralRequest
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// ID is the id argument value.
			ID string
		}
		// GetCNAMERecordStatus holds details about calls to the GetCNAMERecordStatus method.
		GetCNAMERecordStatus []struct {
			// CentralRequest is the centralRequest argument value.
			CentralRequest *dbapi.CentralRequest
		}
		// HasAvailableCapacity holds details about calls to the HasAvailableCapacity method.
		HasAvailableCapacity []struct {
		}
		// HasAvailableCapacityInRegion holds details about calls to the HasAvailableCapacityInRegion method.
		HasAvailableCapacityInRegion []struct {
			// CentralRequest is the centralRequest argument value.
			CentralRequest *dbapi.CentralRequest
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ListArgs is the listArgs argument value.
			ListArgs *services.ListArguments
		}
		// ListByClusterID holds details about calls to the ListByClusterID method.
		ListByClusterID []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
		// ListByStatus holds details about calls to the ListByStatus method.
		ListByStatus []struct {
			// Status is the status argument value.
			Status []constants2.CentralStatus
		}
		// ListCentralsWithRoutesNotCreated holds details about calls to the ListCentralsWithRoutesNotCreated method.
		ListCentralsWithRoutesNotCreated []struct {
		}
		// ListCentralsWithoutAuthConfig holds details about calls to the ListCentralsWithoutAuthConfig method.
		ListCentralsWithoutAuthConfig []struct {
		}
		// ListComponentVersions holds details about calls to the ListComponentVersions method.
		ListComponentVersions []struct {
		}
		// PrepareCentralRequest holds details about calls to the PrepareCentralRequest method.
		PrepareCentralRequest []struct {
			// CentralRequest is the centralRequest argument value.
			CentralRequest *dbapi.CentralRequest
		}
		// RegisterCentralDeprovisionJob holds details about calls to the RegisterCentralDeprovisionJob method.
		RegisterCentralDeprovisionJob []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
		// RegisterCentralJob holds details about calls to the RegisterCentralJob method.
		RegisterCentralJob []struct {
			// CentralRequest is the centralRequest argument value.
			CentralRequest *dbapi.CentralRequest
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// CentralRequest is the centralRequest argument value.
			CentralRequest *dbapi.CentralRequest
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// ID is the id argument value.
			ID string
			// Status is the status argument value.
			Status constants2.CentralStatus
		}
		// Updates holds details about calls to the Updates method.
		Updates []struct {
			// CentralRequest is the centralRequest argument value.
			CentralRequest *dbapi.CentralRequest
			// Values is the values argument value.
			Values map[string]interface{}
		}
		// VerifyAndUpdateCentralAdmin holds details about calls to the VerifyAndUpdateCentralAdmin method.
		VerifyAndUpdateCentralAdmin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CentralRequest is the centralRequest argument value.
			CentralRequest *dbapi.CentralRequest
		}
	}
	lockAcceptCentralRequest             sync.RWMutex
	lockChangeCentralCNAMERecords        sync.RWMutex
	lockCountByRegionAndInstanceType     sync.RWMutex
	lockCountByStatus                    sync.RWMutex
	lockDelete                           sync.RWMutex
	lockDeprovisionCentralForUsers       sync.RWMutex
	lockDeprovisionExpiredCentrals       sync.RWMutex
	lockDetectInstanceType               sync.RWMutex
	lockGet                              sync.RWMutex
	lockGetByID                          sync.RWMutex
	lockGetCNAMERecordStatus             sync.RWMutex
	lockHasAvailableCapacity             sync.RWMutex
	lockHasAvailableCapacityInRegion     sync.RWMutex
	lockList                             sync.RWMutex
	lockListByClusterID                  sync.RWMutex
	lockListByStatus                     sync.RWMutex
	lockListCentralsWithRoutesNotCreated sync.RWMutex
	lockListCentralsWithoutAuthConfig    sync.RWMutex
	lockListComponentVersions            sync.RWMutex
	lockPrepareCentralRequest            sync.RWMutex
	lockRegisterCentralDeprovisionJob    sync.RWMutex
	lockRegisterCentralJob               sync.RWMutex
	lockUpdate                           sync.RWMutex
	lockUpdateStatus                     sync.RWMutex
	lockUpdates                          sync.RWMutex
	lockVerifyAndUpdateCentralAdmin      sync.RWMutex
}

// AcceptCentralRequest calls AcceptCentralRequestFunc.
func (mock *CentralServiceMock) AcceptCentralRequest(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError {
	if mock.AcceptCentralRequestFunc == nil {
		panic("CentralServiceMock.AcceptCentralRequestFunc: method is nil but CentralService.AcceptCentralRequest was just called")
	}
	callInfo := struct {
		CentralRequest *dbapi.CentralRequest
	}{
		CentralRequest: centralRequest,
	}
	mock.lockAcceptCentralRequest.Lock()
	mock.calls.AcceptCentralRequest = append(mock.calls.AcceptCentralRequest, callInfo)
	mock.lockAcceptCentralRequest.Unlock()
	return mock.AcceptCentralRequestFunc(centralRequest)
}

// AcceptCentralRequestCalls gets all the calls that were made to AcceptCentralRequest.
// Check the length with:
//     len(mockedCentralService.AcceptCentralRequestCalls())
func (mock *CentralServiceMock) AcceptCentralRequestCalls() []struct {
	CentralRequest *dbapi.CentralRequest
} {
	var calls []struct {
		CentralRequest *dbapi.CentralRequest
	}
	mock.lockAcceptCentralRequest.RLock()
	calls = mock.calls.AcceptCentralRequest
	mock.lockAcceptCentralRequest.RUnlock()
	return calls
}

// ChangeCentralCNAMERecords calls ChangeCentralCNAMERecordsFunc.
func (mock *CentralServiceMock) ChangeCentralCNAMERecords(centralRequest *dbapi.CentralRequest, action CentralRoutesAction) (*route53.ChangeResourceRecordSetsOutput, *serviceError.ServiceError) {
	if mock.ChangeCentralCNAMERecordsFunc == nil {
		panic("CentralServiceMock.ChangeCentralCNAMERecordsFunc: method is nil but CentralService.ChangeCentralCNAMERecords was just called")
	}
	callInfo := struct {
		CentralRequest *dbapi.CentralRequest
		Action         CentralRoutesAction
	}{
		CentralRequest: centralRequest,
		Action:         action,
	}
	mock.lockChangeCentralCNAMERecords.Lock()
	mock.calls.ChangeCentralCNAMERecords = append(mock.calls.ChangeCentralCNAMERecords, callInfo)
	mock.lockChangeCentralCNAMERecords.Unlock()
	return mock.ChangeCentralCNAMERecordsFunc(centralRequest, action)
}

// ChangeCentralCNAMERecordsCalls gets all the calls that were made to ChangeCentralCNAMERecords.
// Check the length with:
//     len(mockedCentralService.ChangeCentralCNAMERecordsCalls())
func (mock *CentralServiceMock) ChangeCentralCNAMERecordsCalls() []struct {
	CentralRequest *dbapi.CentralRequest
	Action         CentralRoutesAction
} {
	var calls []struct {
		CentralRequest *dbapi.CentralRequest
		Action         CentralRoutesAction
	}
	mock.lockChangeCentralCNAMERecords.RLock()
	calls = mock.calls.ChangeCentralCNAMERecords
	mock.lockChangeCentralCNAMERecords.RUnlock()
	return calls
}

// CountByRegionAndInstanceType calls CountByRegionAndInstanceTypeFunc.
func (mock *CentralServiceMock) CountByRegionAndInstanceType() ([]CentralRegionCount, error) {
	if mock.CountByRegionAndInstanceTypeFunc == nil {
		panic("CentralServiceMock.CountByRegionAndInstanceTypeFunc: method is nil but CentralService.CountByRegionAndInstanceType was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCountByRegionAndInstanceType.Lock()
	mock.calls.CountByRegionAndInstanceType = append(mock.calls.CountByRegionAndInstanceType, callInfo)
	mock.lockCountByRegionAndInstanceType.Unlock()
	return mock.CountByRegionAndInstanceTypeFunc()
}

// CountByRegionAndInstanceTypeCalls gets all the calls that were made to CountByRegionAndInstanceType.
// Check the length with:
//     len(mockedCentralService.CountByRegionAndInstanceTypeCalls())
func (mock *CentralServiceMock) CountByRegionAndInstanceTypeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCountByRegionAndInstanceType.RLock()
	calls = mock.calls.CountByRegionAndInstanceType
	mock.lockCountByRegionAndInstanceType.RUnlock()
	return calls
}

// CountByStatus calls CountByStatusFunc.
func (mock *CentralServiceMock) CountByStatus(status []constants2.CentralStatus) ([]CentralStatusCount, error) {
	if mock.CountByStatusFunc == nil {
		panic("CentralServiceMock.CountByStatusFunc: method is nil but CentralService.CountByStatus was just called")
	}
	callInfo := struct {
		Status []constants2.CentralStatus
	}{
		Status: status,
	}
	mock.lockCountByStatus.Lock()
	mock.calls.CountByStatus = append(mock.calls.CountByStatus, callInfo)
	mock.lockCountByStatus.Unlock()
	return mock.CountByStatusFunc(status)
}

// CountByStatusCalls gets all the calls that were made to CountByStatus.
// Check the length with:
//     len(mockedCentralService.CountByStatusCalls())
func (mock *CentralServiceMock) CountByStatusCalls() []struct {
	Status []constants2.CentralStatus
} {
	var calls []struct {
		Status []constants2.CentralStatus
	}
	mock.lockCountByStatus.RLock()
	calls = mock.calls.CountByStatus
	mock.lockCountByStatus.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *CentralServiceMock) Delete(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError {
	if mock.DeleteFunc == nil {
		panic("CentralServiceMock.DeleteFunc: method is nil but CentralService.Delete was just called")
	}
	callInfo := struct {
		CentralRequest *dbapi.CentralRequest
	}{
		CentralRequest: centralRequest,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(centralRequest)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedCentralService.DeleteCalls())
func (mock *CentralServiceMock) DeleteCalls() []struct {
	CentralRequest *dbapi.CentralRequest
} {
	var calls []struct {
		CentralRequest *dbapi.CentralRequest
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// DeprovisionCentralForUsers calls DeprovisionCentralForUsersFunc.
func (mock *CentralServiceMock) DeprovisionCentralForUsers(users []string) *serviceError.ServiceError {
	if mock.DeprovisionCentralForUsersFunc == nil {
		panic("CentralServiceMock.DeprovisionCentralForUsersFunc: method is nil but CentralService.DeprovisionCentralForUsers was just called")
	}
	callInfo := struct {
		Users []string
	}{
		Users: users,
	}
	mock.lockDeprovisionCentralForUsers.Lock()
	mock.calls.DeprovisionCentralForUsers = append(mock.calls.DeprovisionCentralForUsers, callInfo)
	mock.lockDeprovisionCentralForUsers.Unlock()
	return mock.DeprovisionCentralForUsersFunc(users)
}

// DeprovisionCentralForUsersCalls gets all the calls that were made to DeprovisionCentralForUsers.
// Check the length with:
//     len(mockedCentralService.DeprovisionCentralForUsersCalls())
func (mock *CentralServiceMock) DeprovisionCentralForUsersCalls() []struct {
	Users []string
} {
	var calls []struct {
		Users []string
	}
	mock.lockDeprovisionCentralForUsers.RLock()
	calls = mock.calls.DeprovisionCentralForUsers
	mock.lockDeprovisionCentralForUsers.RUnlock()
	return calls
}

// DeprovisionExpiredCentrals calls DeprovisionExpiredCentralsFunc.
func (mock *CentralServiceMock) DeprovisionExpiredCentrals(centralAgeInHours int) *serviceError.ServiceError {
	if mock.DeprovisionExpiredCentralsFunc == nil {
		panic("CentralServiceMock.DeprovisionExpiredCentralsFunc: method is nil but CentralService.DeprovisionExpiredCentrals was just called")
	}
	callInfo := struct {
		CentralAgeInHours int
	}{
		CentralAgeInHours: centralAgeInHours,
	}
	mock.lockDeprovisionExpiredCentrals.Lock()
	mock.calls.DeprovisionExpiredCentrals = append(mock.calls.DeprovisionExpiredCentrals, callInfo)
	mock.lockDeprovisionExpiredCentrals.Unlock()
	return mock.DeprovisionExpiredCentralsFunc(centralAgeInHours)
}

// DeprovisionExpiredCentralsCalls gets all the calls that were made to DeprovisionExpiredCentrals.
// Check the length with:
//     len(mockedCentralService.DeprovisionExpiredCentralsCalls())
func (mock *CentralServiceMock) DeprovisionExpiredCentralsCalls() []struct {
	CentralAgeInHours int
} {
	var calls []struct {
		CentralAgeInHours int
	}
	mock.lockDeprovisionExpiredCentrals.RLock()
	calls = mock.calls.DeprovisionExpiredCentrals
	mock.lockDeprovisionExpiredCentrals.RUnlock()
	return calls
}

// DetectInstanceType calls DetectInstanceTypeFunc.
func (mock *CentralServiceMock) DetectInstanceType(centralRequest *dbapi.CentralRequest) (types.CentralInstanceType, *serviceError.ServiceError) {
	if mock.DetectInstanceTypeFunc == nil {
		panic("CentralServiceMock.DetectInstanceTypeFunc: method is nil but CentralService.DetectInstanceType was just called")
	}
	callInfo := struct {
		CentralRequest *dbapi.CentralRequest
	}{
		CentralRequest: centralRequest,
	}
	mock.lockDetectInstanceType.Lock()
	mock.calls.DetectInstanceType = append(mock.calls.DetectInstanceType, callInfo)
	mock.lockDetectInstanceType.Unlock()
	return mock.DetectInstanceTypeFunc(centralRequest)
}

// DetectInstanceTypeCalls gets all the calls that were made to DetectInstanceType.
// Check the length with:
//     len(mockedCentralService.DetectInstanceTypeCalls())
func (mock *CentralServiceMock) DetectInstanceTypeCalls() []struct {
	CentralRequest *dbapi.CentralRequest
} {
	var calls []struct {
		CentralRequest *dbapi.CentralRequest
	}
	mock.lockDetectInstanceType.RLock()
	calls = mock.calls.DetectInstanceType
	mock.lockDetectInstanceType.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *CentralServiceMock) Get(ctx context.Context, id string) (*dbapi.CentralRequest, *serviceError.ServiceError) {
	if mock.GetFunc == nil {
		panic("CentralServiceMock.GetFunc: method is nil but CentralService.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCentralService.GetCalls())
func (mock *CentralServiceMock) GetCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *CentralServiceMock) GetByID(id string) (*dbapi.CentralRequest, *serviceError.ServiceError) {
	if mock.GetByIDFunc == nil {
		panic("CentralServiceMock.GetByIDFunc: method is nil but CentralService.GetByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//     len(mockedCentralService.GetByIDCalls())
func (mock *CentralServiceMock) GetByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// GetCNAMERecordStatus calls GetCNAMERecordStatusFunc.
func (mock *CentralServiceMock) GetCNAMERecordStatus(centralRequest *dbapi.CentralRequest) (*CNameRecordStatus, error) {
	if mock.GetCNAMERecordStatusFunc == nil {
		panic("CentralServiceMock.GetCNAMERecordStatusFunc: method is nil but CentralService.GetCNAMERecordStatus was just called")
	}
	callInfo := struct {
		CentralRequest *dbapi.CentralRequest
	}{
		CentralRequest: centralRequest,
	}
	mock.lockGetCNAMERecordStatus.Lock()
	mock.calls.GetCNAMERecordStatus = append(mock.calls.GetCNAMERecordStatus, callInfo)
	mock.lockGetCNAMERecordStatus.Unlock()
	return mock.GetCNAMERecordStatusFunc(centralRequest)
}

// GetCNAMERecordStatusCalls gets all the calls that were made to GetCNAMERecordStatus.
// Check the length with:
//     len(mockedCentralService.GetCNAMERecordStatusCalls())
func (mock *CentralServiceMock) GetCNAMERecordStatusCalls() []struct {
	CentralRequest *dbapi.CentralRequest
} {
	var calls []struct {
		CentralRequest *dbapi.CentralRequest
	}
	mock.lockGetCNAMERecordStatus.RLock()
	calls = mock.calls.GetCNAMERecordStatus
	mock.lockGetCNAMERecordStatus.RUnlock()
	return calls
}

// HasAvailableCapacity calls HasAvailableCapacityFunc.
func (mock *CentralServiceMock) HasAvailableCapacity() (bool, *serviceError.ServiceError) {
	if mock.HasAvailableCapacityFunc == nil {
		panic("CentralServiceMock.HasAvailableCapacityFunc: method is nil but CentralService.HasAvailableCapacity was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHasAvailableCapacity.Lock()
	mock.calls.HasAvailableCapacity = append(mock.calls.HasAvailableCapacity, callInfo)
	mock.lockHasAvailableCapacity.Unlock()
	return mock.HasAvailableCapacityFunc()
}

// HasAvailableCapacityCalls gets all the calls that were made to HasAvailableCapacity.
// Check the length with:
//     len(mockedCentralService.HasAvailableCapacityCalls())
func (mock *CentralServiceMock) HasAvailableCapacityCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHasAvailableCapacity.RLock()
	calls = mock.calls.HasAvailableCapacity
	mock.lockHasAvailableCapacity.RUnlock()
	return calls
}

// HasAvailableCapacityInRegion calls HasAvailableCapacityInRegionFunc.
func (mock *CentralServiceMock) HasAvailableCapacityInRegion(centralRequest *dbapi.CentralRequest) (bool, *serviceError.ServiceError) {
	if mock.HasAvailableCapacityInRegionFunc == nil {
		panic("CentralServiceMock.HasAvailableCapacityInRegionFunc: method is nil but CentralService.HasAvailableCapacityInRegion was just called")
	}
	callInfo := struct {
		CentralRequest *dbapi.CentralRequest
	}{
		CentralRequest: centralRequest,
	}
	mock.lockHasAvailableCapacityInRegion.Lock()
	mock.calls.HasAvailableCapacityInRegion = append(mock.calls.HasAvailableCapacityInRegion, callInfo)
	mock.lockHasAvailableCapacityInRegion.Unlock()
	return mock.HasAvailableCapacityInRegionFunc(centralRequest)
}

// HasAvailableCapacityInRegionCalls gets all the calls that were made to HasAvailableCapacityInRegion.
// Check the length with:
//     len(mockedCentralService.HasAvailableCapacityInRegionCalls())
func (mock *CentralServiceMock) HasAvailableCapacityInRegionCalls() []struct {
	CentralRequest *dbapi.CentralRequest
} {
	var calls []struct {
		CentralRequest *dbapi.CentralRequest
	}
	mock.lockHasAvailableCapacityInRegion.RLock()
	calls = mock.calls.HasAvailableCapacityInRegion
	mock.lockHasAvailableCapacityInRegion.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *CentralServiceMock) List(ctx context.Context, listArgs *services.ListArguments) (dbapi.CentralList, *api.PagingMeta, *serviceError.ServiceError) {
	if mock.ListFunc == nil {
		panic("CentralServiceMock.ListFunc: method is nil but CentralService.List was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ListArgs *services.ListArguments
	}{
		Ctx:      ctx,
		ListArgs: listArgs,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, listArgs)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedCentralService.ListCalls())
func (mock *CentralServiceMock) ListCalls() []struct {
	Ctx      context.Context
	ListArgs *services.ListArguments
} {
	var calls []struct {
		Ctx      context.Context
		ListArgs *services.ListArguments
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ListByClusterID calls ListByClusterIDFunc.
func (mock *CentralServiceMock) ListByClusterID(clusterID string) ([]*dbapi.CentralRequest, *serviceError.ServiceError) {
	if mock.ListByClusterIDFunc == nil {
		panic("CentralServiceMock.ListByClusterIDFunc: method is nil but CentralService.ListByClusterID was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	mock.lockListByClusterID.Lock()
	mock.calls.ListByClusterID = append(mock.calls.ListByClusterID, callInfo)
	mock.lockListByClusterID.Unlock()
	return mock.ListByClusterIDFunc(clusterID)
}

// ListByClusterIDCalls gets all the calls that were made to ListByClusterID.
// Check the length with:
//     len(mockedCentralService.ListByClusterIDCalls())
func (mock *CentralServiceMock) ListByClusterIDCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	mock.lockListByClusterID.RLock()
	calls = mock.calls.ListByClusterID
	mock.lockListByClusterID.RUnlock()
	return calls
}

// ListByStatus calls ListByStatusFunc.
func (mock *CentralServiceMock) ListByStatus(status ...constants2.CentralStatus) ([]*dbapi.CentralRequest, *serviceError.ServiceError) {
	if mock.ListByStatusFunc == nil {
		panic("CentralServiceMock.ListByStatusFunc: method is nil but CentralService.ListByStatus was just called")
	}
	callInfo := struct {
		Status []constants2.CentralStatus
	}{
		Status: status,
	}
	mock.lockListByStatus.Lock()
	mock.calls.ListByStatus = append(mock.calls.ListByStatus, callInfo)
	mock.lockListByStatus.Unlock()
	return mock.ListByStatusFunc(status...)
}

// ListByStatusCalls gets all the calls that were made to ListByStatus.
// Check the length with:
//     len(mockedCentralService.ListByStatusCalls())
func (mock *CentralServiceMock) ListByStatusCalls() []struct {
	Status []constants2.CentralStatus
} {
	var calls []struct {
		Status []constants2.CentralStatus
	}
	mock.lockListByStatus.RLock()
	calls = mock.calls.ListByStatus
	mock.lockListByStatus.RUnlock()
	return calls
}

// ListCentralsWithRoutesNotCreated calls ListCentralsWithRoutesNotCreatedFunc.
func (mock *CentralServiceMock) ListCentralsWithRoutesNotCreated() ([]*dbapi.CentralRequest, *serviceError.ServiceError) {
	if mock.ListCentralsWithRoutesNotCreatedFunc == nil {
		panic("CentralServiceMock.ListCentralsWithRoutesNotCreatedFunc: method is nil but CentralService.ListCentralsWithRoutesNotCreated was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListCentralsWithRoutesNotCreated.Lock()
	mock.calls.ListCentralsWithRoutesNotCreated = append(mock.calls.ListCentralsWithRoutesNotCreated, callInfo)
	mock.lockListCentralsWithRoutesNotCreated.Unlock()
	return mock.ListCentralsWithRoutesNotCreatedFunc()
}

// ListCentralsWithRoutesNotCreatedCalls gets all the calls that were made to ListCentralsWithRoutesNotCreated.
// Check the length with:
//     len(mockedCentralService.ListCentralsWithRoutesNotCreatedCalls())
func (mock *CentralServiceMock) ListCentralsWithRoutesNotCreatedCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListCentralsWithRoutesNotCreated.RLock()
	calls = mock.calls.ListCentralsWithRoutesNotCreated
	mock.lockListCentralsWithRoutesNotCreated.RUnlock()
	return calls
}

// ListCentralsWithoutAuthConfig calls ListCentralsWithoutAuthConfigFunc.
func (mock *CentralServiceMock) ListCentralsWithoutAuthConfig() ([]*dbapi.CentralRequest, *serviceError.ServiceError) {
	if mock.ListCentralsWithoutAuthConfigFunc == nil {
		panic("CentralServiceMock.ListCentralsWithoutAuthConfigFunc: method is nil but CentralService.ListCentralsWithoutAuthConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListCentralsWithoutAuthConfig.Lock()
	mock.calls.ListCentralsWithoutAuthConfig = append(mock.calls.ListCentralsWithoutAuthConfig, callInfo)
	mock.lockListCentralsWithoutAuthConfig.Unlock()
	return mock.ListCentralsWithoutAuthConfigFunc()
}

// ListCentralsWithoutAuthConfigCalls gets all the calls that were made to ListCentralsWithoutAuthConfig.
// Check the length with:
//     len(mockedCentralService.ListCentralsWithoutAuthConfigCalls())
func (mock *CentralServiceMock) ListCentralsWithoutAuthConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListCentralsWithoutAuthConfig.RLock()
	calls = mock.calls.ListCentralsWithoutAuthConfig
	mock.lockListCentralsWithoutAuthConfig.RUnlock()
	return calls
}

// ListComponentVersions calls ListComponentVersionsFunc.
func (mock *CentralServiceMock) ListComponentVersions() ([]CentralComponentVersions, error) {
	if mock.ListComponentVersionsFunc == nil {
		panic("CentralServiceMock.ListComponentVersionsFunc: method is nil but CentralService.ListComponentVersions was just called")
	}
	callInfo := struct {
	}{}
	mock.lockListComponentVersions.Lock()
	mock.calls.ListComponentVersions = append(mock.calls.ListComponentVersions, callInfo)
	mock.lockListComponentVersions.Unlock()
	return mock.ListComponentVersionsFunc()
}

// ListComponentVersionsCalls gets all the calls that were made to ListComponentVersions.
// Check the length with:
//     len(mockedCentralService.ListComponentVersionsCalls())
func (mock *CentralServiceMock) ListComponentVersionsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockListComponentVersions.RLock()
	calls = mock.calls.ListComponentVersions
	mock.lockListComponentVersions.RUnlock()
	return calls
}

// PrepareCentralRequest calls PrepareCentralRequestFunc.
func (mock *CentralServiceMock) PrepareCentralRequest(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError {
	if mock.PrepareCentralRequestFunc == nil {
		panic("CentralServiceMock.PrepareCentralRequestFunc: method is nil but CentralService.PrepareCentralRequest was just called")
	}
	callInfo := struct {
		CentralRequest *dbapi.CentralRequest
	}{
		CentralRequest: centralRequest,
	}
	mock.lockPrepareCentralRequest.Lock()
	mock.calls.PrepareCentralRequest = append(mock.calls.PrepareCentralRequest, callInfo)
	mock.lockPrepareCentralRequest.Unlock()
	return mock.PrepareCentralRequestFunc(centralRequest)
}

// PrepareCentralRequestCalls gets all the calls that were made to PrepareCentralRequest.
// Check the length with:
//     len(mockedCentralService.PrepareCentralRequestCalls())
func (mock *CentralServiceMock) PrepareCentralRequestCalls() []struct {
	CentralRequest *dbapi.CentralRequest
} {
	var calls []struct {
		CentralRequest *dbapi.CentralRequest
	}
	mock.lockPrepareCentralRequest.RLock()
	calls = mock.calls.PrepareCentralRequest
	mock.lockPrepareCentralRequest.RUnlock()
	return calls
}

// RegisterCentralDeprovisionJob calls RegisterCentralDeprovisionJobFunc.
func (mock *CentralServiceMock) RegisterCentralDeprovisionJob(ctx context.Context, id string) *serviceError.ServiceError {
	if mock.RegisterCentralDeprovisionJobFunc == nil {
		panic("CentralServiceMock.RegisterCentralDeprovisionJobFunc: method is nil but CentralService.RegisterCentralDeprovisionJob was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRegisterCentralDeprovisionJob.Lock()
	mock.calls.RegisterCentralDeprovisionJob = append(mock.calls.RegisterCentralDeprovisionJob, callInfo)
	mock.lockRegisterCentralDeprovisionJob.Unlock()
	return mock.RegisterCentralDeprovisionJobFunc(ctx, id)
}

// RegisterCentralDeprovisionJobCalls gets all the calls that were made to RegisterCentralDeprovisionJob.
// Check the length with:
//     len(mockedCentralService.RegisterCentralDeprovisionJobCalls())
func (mock *CentralServiceMock) RegisterCentralDeprovisionJobCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockRegisterCentralDeprovisionJob.RLock()
	calls = mock.calls.RegisterCentralDeprovisionJob
	mock.lockRegisterCentralDeprovisionJob.RUnlock()
	return calls
}

// RegisterCentralJob calls RegisterCentralJobFunc.
func (mock *CentralServiceMock) RegisterCentralJob(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError {
	if mock.RegisterCentralJobFunc == nil {
		panic("CentralServiceMock.RegisterCentralJobFunc: method is nil but CentralService.RegisterCentralJob was just called")
	}
	callInfo := struct {
		CentralRequest *dbapi.CentralRequest
	}{
		CentralRequest: centralRequest,
	}
	mock.lockRegisterCentralJob.Lock()
	mock.calls.RegisterCentralJob = append(mock.calls.RegisterCentralJob, callInfo)
	mock.lockRegisterCentralJob.Unlock()
	return mock.RegisterCentralJobFunc(centralRequest)
}

// RegisterCentralJobCalls gets all the calls that were made to RegisterCentralJob.
// Check the length with:
//     len(mockedCentralService.RegisterCentralJobCalls())
func (mock *CentralServiceMock) RegisterCentralJobCalls() []struct {
	CentralRequest *dbapi.CentralRequest
} {
	var calls []struct {
		CentralRequest *dbapi.CentralRequest
	}
	mock.lockRegisterCentralJob.RLock()
	calls = mock.calls.RegisterCentralJob
	mock.lockRegisterCentralJob.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CentralServiceMock) Update(centralRequest *dbapi.CentralRequest) *serviceError.ServiceError {
	if mock.UpdateFunc == nil {
		panic("CentralServiceMock.UpdateFunc: method is nil but CentralService.Update was just called")
	}
	callInfo := struct {
		CentralRequest *dbapi.CentralRequest
	}{
		CentralRequest: centralRequest,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(centralRequest)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedCentralService.UpdateCalls())
func (mock *CentralServiceMock) UpdateCalls() []struct {
	CentralRequest *dbapi.CentralRequest
} {
	var calls []struct {
		CentralRequest *dbapi.CentralRequest
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *CentralServiceMock) UpdateStatus(id string, status constants2.CentralStatus) (bool, *serviceError.ServiceError) {
	if mock.UpdateStatusFunc == nil {
		panic("CentralServiceMock.UpdateStatusFunc: method is nil but CentralService.UpdateStatus was just called")
	}
	callInfo := struct {
		ID     string
		Status constants2.CentralStatus
	}{
		ID:     id,
		Status: status,
	}
	mock.lockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	mock.lockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(id, status)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//     len(mockedCentralService.UpdateStatusCalls())
func (mock *CentralServiceMock) UpdateStatusCalls() []struct {
	ID     string
	Status constants2.CentralStatus
} {
	var calls []struct {
		ID     string
		Status constants2.CentralStatus
	}
	mock.lockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	mock.lockUpdateStatus.RUnlock()
	return calls
}

// Updates calls UpdatesFunc.
func (mock *CentralServiceMock) Updates(centralRequest *dbapi.CentralRequest, values map[string]interface{}) *serviceError.ServiceError {
	if mock.UpdatesFunc == nil {
		panic("CentralServiceMock.UpdatesFunc: method is nil but CentralService.Updates was just called")
	}
	callInfo := struct {
		CentralRequest *dbapi.CentralRequest
		Values         map[string]interface{}
	}{
		CentralRequest: centralRequest,
		Values:         values,
	}
	mock.lockUpdates.Lock()
	mock.calls.Updates = append(mock.calls.Updates, callInfo)
	mock.lockUpdates.Unlock()
	return mock.UpdatesFunc(centralRequest, values)
}

// UpdatesCalls gets all the calls that were made to Updates.
// Check the length with:
//     len(mockedCentralService.UpdatesCalls())
func (mock *CentralServiceMock) UpdatesCalls() []struct {
	CentralRequest *dbapi.CentralRequest
	Values         map[string]interface{}
} {
	var calls []struct {
		CentralRequest *dbapi.CentralRequest
		Values         map[string]interface{}
	}
	mock.lockUpdates.RLock()
	calls = mock.calls.Updates
	mock.lockUpdates.RUnlock()
	return calls
}

// VerifyAndUpdateCentralAdmin calls VerifyAndUpdateCentralAdminFunc.
func (mock *CentralServiceMock) VerifyAndUpdateCentralAdmin(ctx context.Context, centralRequest *dbapi.CentralRequest) *serviceError.ServiceError {
	if mock.VerifyAndUpdateCentralAdminFunc == nil {
		panic("CentralServiceMock.VerifyAndUpdateCentralAdminFunc: method is nil but CentralService.VerifyAndUpdateCentralAdmin was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		CentralRequest *dbapi.CentralRequest
	}{
		Ctx:            ctx,
		CentralRequest: centralRequest,
	}
	mock.lockVerifyAndUpdateCentralAdmin.Lock()
	mock.calls.VerifyAndUpdateCentralAdmin = append(mock.calls.VerifyAndUpdateCentralAdmin, callInfo)
	mock.lockVerifyAndUpdateCentralAdmin.Unlock()
	return mock.VerifyAndUpdateCentralAdminFunc(ctx, centralRequest)
}

// VerifyAndUpdateCentralAdminCalls gets all the calls that were made to VerifyAndUpdateCentralAdmin.
// Check the length with:
//     len(mockedCentralService.VerifyAndUpdateCentralAdminCalls())
func (mock *CentralServiceMock) VerifyAndUpdateCentralAdminCalls() []struct {
	Ctx            context.Context
	CentralRequest *dbapi.CentralRequest
} {
	var calls []struct {
		Ctx            context.Context
		CentralRequest *dbapi.CentralRequest
	}
	mock.lockVerifyAndUpdateCentralAdmin.RLock()
	calls = mock.calls.VerifyAndUpdateCentralAdmin
	mock.lockVerifyAndUpdateCentralAdmin.RUnlock()
	return calls
}
