// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: internal/dinosaur/pkg/api/private/grpc/fleet-manger-private.proto

package fleetmanager_private_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FleetManagerPrivateClient is the client API for FleetManagerPrivate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetManagerPrivateClient interface {
	UpdateCentralStatus(ctx context.Context, in *UpdateCentralStatusRequest, opts ...grpc.CallOption) (*UpdateCentralStatusResponse, error)
	GetCentrals(ctx context.Context, in *GetCentralsRequest, opts ...grpc.CallOption) (*GetCentralsResponse, error)
}

type fleetManagerPrivateClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetManagerPrivateClient(cc grpc.ClientConnInterface) FleetManagerPrivateClient {
	return &fleetManagerPrivateClient{cc}
}

func (c *fleetManagerPrivateClient) UpdateCentralStatus(ctx context.Context, in *UpdateCentralStatusRequest, opts ...grpc.CallOption) (*UpdateCentralStatusResponse, error) {
	out := new(UpdateCentralStatusResponse)
	err := c.cc.Invoke(ctx, "/fleetmanager.FleetManagerPrivate/UpdateCentralStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetManagerPrivateClient) GetCentrals(ctx context.Context, in *GetCentralsRequest, opts ...grpc.CallOption) (*GetCentralsResponse, error) {
	out := new(GetCentralsResponse)
	err := c.cc.Invoke(ctx, "/fleetmanager.FleetManagerPrivate/GetCentrals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetManagerPrivateServer is the server API for FleetManagerPrivate service.
// All implementations must embed UnimplementedFleetManagerPrivateServer
// for forward compatibility
type FleetManagerPrivateServer interface {
	UpdateCentralStatus(context.Context, *UpdateCentralStatusRequest) (*UpdateCentralStatusResponse, error)
	GetCentrals(context.Context, *GetCentralsRequest) (*GetCentralsResponse, error)
	mustEmbedUnimplementedFleetManagerPrivateServer()
}

// UnimplementedFleetManagerPrivateServer must be embedded to have forward compatible implementations.
type UnimplementedFleetManagerPrivateServer struct {
}

func (UnimplementedFleetManagerPrivateServer) UpdateCentralStatus(context.Context, *UpdateCentralStatusRequest) (*UpdateCentralStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCentralStatus not implemented")
}
func (UnimplementedFleetManagerPrivateServer) GetCentrals(context.Context, *GetCentralsRequest) (*GetCentralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCentrals not implemented")
}
func (UnimplementedFleetManagerPrivateServer) mustEmbedUnimplementedFleetManagerPrivateServer() {}

// UnsafeFleetManagerPrivateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetManagerPrivateServer will
// result in compilation errors.
type UnsafeFleetManagerPrivateServer interface {
	mustEmbedUnimplementedFleetManagerPrivateServer()
}

func RegisterFleetManagerPrivateServer(s grpc.ServiceRegistrar, srv FleetManagerPrivateServer) {
	s.RegisterService(&FleetManagerPrivate_ServiceDesc, srv)
}

func _FleetManagerPrivate_UpdateCentralStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCentralStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetManagerPrivateServer).UpdateCentralStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleetmanager.FleetManagerPrivate/UpdateCentralStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetManagerPrivateServer).UpdateCentralStatus(ctx, req.(*UpdateCentralStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetManagerPrivate_GetCentrals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCentralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetManagerPrivateServer).GetCentrals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleetmanager.FleetManagerPrivate/GetCentrals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetManagerPrivateServer).GetCentrals(ctx, req.(*GetCentralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FleetManagerPrivate_ServiceDesc is the grpc.ServiceDesc for FleetManagerPrivate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FleetManagerPrivate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fleetmanager.FleetManagerPrivate",
	HandlerType: (*FleetManagerPrivateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCentralStatus",
			Handler:    _FleetManagerPrivate_UpdateCentralStatus_Handler,
		},
		{
			MethodName: "GetCentrals",
			Handler:    _FleetManagerPrivate_GetCentrals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/dinosaur/pkg/api/private/grpc/fleet-manger-private.proto",
}
